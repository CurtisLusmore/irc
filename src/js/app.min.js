/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _Client = __webpack_require__(1);
	
	var _Client2 = _interopRequireDefault(_Client);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	(function () {
	    new _Client2.default(document.getElementById('app'));
	})();

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _IrcClient = __webpack_require__(2);
	
	var _IrcClient2 = _interopRequireDefault(_IrcClient);
	
	var _helpers = __webpack_require__(4);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Class representing a form-backed IRC client.
	 */
	
	var Client = function () {
	    /**
	     * Create a new client and the form that provides its input and output.
	     * @param {container} The container element to add the form to.
	     */
	
	    function Client(container) {
	        var _this = this;
	
	        _classCallCheck(this, Client);
	
	        var form = document.createElement('form');
	        form.className = 'client';
	        var output = document.createElement('div');
	        output.className = 'client-output';
	        output.disabled = true;
	        form.appendChild(output);
	        var input = document.createElement('input');
	        input.className = 'client-input';
	        input.autofocus = true;
	        input.placeholder = 'JOIN #channel';
	        form.appendChild(input);
	        form.onsubmit = function () {
	            return _this.sendMessage();
	        };
	        container.appendChild(form);
	
	        var client = new _IrcClient2.default('chat.freenode.net', 6667);
	        client.subscribe('PING', function (msg) {
	            client.sendCommand('PONG', msg);
	        }).subscribe('NOTICE', function (msg) {
	            var res = (0, _helpers.split)(msg);
	            var recipient = res[0];
	            var message = res[1].substring(1);
	            _this.writeMessage(message);
	        })
	        // .subscribe(['001', '002', '003'], msg => { // Welcome
	        //     var res = split(msg);
	        //     var message = res[1].substring(1);
	        //     this.writeMessage(message);
	        // })
	        // .subscribe(['004', '005'], msg => { // info
	        //     var res = split(msg);
	        //     var message = res[1];
	        //     this.writeMessage(message);
	        // })
	        .subscribe(['353', '366'], function (msg) {
	            // NAMES
	            var res = (0, _helpers.split)(msg, ' ', 2);
	            var message = res[2];
	            _this.writeMessage(message);
	        }).subscribe(['432', '433', '451'], function (msg) {
	            // ERR_NICKNAMEINUSE
	            var res = (0, _helpers.split)(msg);
	            var message = res[1];
	            _this.writeMessage(message);
	        }).subscribe(['704', '705', '706'], function (msg) {
	            // HELP
	            var res = (0, _helpers.split)(msg, ' ', 2);
	            var msg = res[2].substring(1).trim();
	            if (msg !== '') _this.writeMessage(msg);
	        }).subscribe('QUIT', function (msg, pre) {
	            var user = (0, _helpers.makeUser)(pre);
	            _this.writeMessage(user.span, " has quit: " + msg.substring(1));
	        }).subscribe('JOIN', function (msg, pre) {
	            var user = (0, _helpers.makeUser)(pre);
	            _this.writeMessage(user.span, " has joined " + msg);
	        }).subscribe('PART', function (msg, pre) {
	            var user = (0, _helpers.makeUser)(pre);
	            _this.writeMessage(user.span, " has left " + msg);
	        }).subscribe('NICK', function (msg, pre) {
	            var user = (0, _helpers.makeUser)(pre);
	            _this.writeMessage(user.span, " has changed nicknames to " + msg);
	        }).subscribe('PRIVMSG', function (msg, pre) {
	            var res = (0, _helpers.split)(msg);
	            var channel = res[0];
	            var message = res[1].substring(1);
	            var user = (0, _helpers.makeUser)(pre);
	            _this.writeMessage(channel + ": ", user.span, ": " + message);
	        });
	        client.sendCommand('PASS', 'curtispassword').sendCommand('NICK', 'curtis52').sendCommand('USER', 'curtis52', '0', '*', 'curtis');
	
	        this.form = form;
	        this.input = input;
	        this.output = output;
	        this.client = client;
	    }
	
	    /**
	     * Send a message to the IRC server.
	     * @param {arguments} The components of the message to send.
	     */
	
	
	    _createClass(Client, [{
	        key: "sendMessage",
	        value: function sendMessage() {
	            var message = this.input.value;
	            this.input.value = '';
	
	            this.client.sendMessage(message);
	            return false;
	        }
	
	        /**
	         * Write a message to the form output. Adds all arguments to a container
	         * element which represents a single message.
	         * @param {arguments} The components of the message.
	         */
	
	    }, {
	        key: "writeMessage",
	        value: function writeMessage() {
	            if (arguments.length === 1 && arguments[0] === '') {
	                console.log('empty');
	            }
	            var elem = document.createElement('div');
	            for (var ind in arguments) {
	                var argument = arguments[ind];
	                elem.appendChild(argument instanceof HTMLElement ? argument : document.createTextNode(argument));
	            }
	            return this.writeElement(elem);
	        }
	
	        /**
	         * Write a HTML element to the form output.
	         * @param {elem} A HTML element.
	         */
	
	    }, {
	        key: "writeElement",
	        value: function writeElement(elem) {
	            var scrollToBottom = this.output.scrollTop + this.output.clientHeight + 1 >= this.output.scrollHeight;
	
	            var container = document.createElement('div');
	            container.className = 'client-message';
	            var date = document.createElement('div');
	            date.innerText = new Date().toLocaleTimeString();
	            date.className = 'client-message-timestamp';
	            container.appendChild(date);
	            container.appendChild(elem);
	            this.output.appendChild(container);
	
	            if (scrollToBottom) {
	                this.output.scrollTop = this.output.scrollHeight;
	            }
	            return this;
	        }
	    }]);
	
	    return Client;
	}();
	
	(function () {
	    new Client(document.getElementById('app'));
	})();

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _net = __webpack_require__(3);
	
	var _net2 = _interopRequireDefault(_net);
	
	var _helpers = __webpack_require__(4);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * A class representing an IRC client. Allows sending and receiving of messages
	 * to/from an IRC server.
	 */
	
	var IrcClient = function () {
	    /**
	     * Create a new IRC client.
	     * @param {host} The hostname of the server to connect to.
	     * @param {port} The port number of the server to connect to.
	     */
	
	    function IrcClient(host, port) {
	        var _this = this;
	
	        _classCallCheck(this, IrcClient);
	
	        var socket = new _net2.default();
	        socket.setEncoding('ascii');
	        socket.connect({
	            host: host,
	            port: port
	        });
	        socket.on('data', function (data) {
	            return _this.receiveData(data);
	        });
	
	        this.socket = socket;
	        this.buffer = '';
	        this.recvEvent = (0, _helpers.event)();
	    }
	
	    /**
	     * Subscribe to messages received by the IRC server.
	     * @param {target} The target message/s to subscribe to. If a string,
	     *     matches messages of the supplied command. If a list, matches
	     *     messages of any of the supplied commands. If a predicate, matches
	     *     messages whose command satisfies the predicate.
	     * @param {handler} The callback function. Receives the message, prefix and
	     *     command.
	     * @return A callable to unsubscribe.
	     */
	
	
	    _createClass(IrcClient, [{
	        key: 'subscribe',
	        value: function subscribe(target, handler) {
	            var predicate;
	            switch (typeof target === 'undefined' ? 'undefined' : _typeof(target)) {
	                case 'string':
	                    predicate = function predicate(msg, pre, cmd) {
	                        return target === cmd;
	                    };
	                    break;
	                case 'object':
	                    predicate = function predicate(msg, pre, cmd) {
	                        return target.includes(cmd);
	                    };
	                    break;
	                default:
	                    predicate = target;
	                    break;
	            }
	            this.recvEvent.subscribe(handler, predicate);
	            return this;
	        }
	
	        /**
	         * Send a message to the IRC server.
	         * @param {message} The message to send.
	         */
	
	    }, {
	        key: 'sendMessage',
	        value: function sendMessage(message) {
	            console.log('<<< ' + message);
	            this.socket.write(message + '\r\n');
	            return this;
	        }
	
	        /**
	         * Send a command to the IRC server, by joining the array of arguments
	         * with spaces.
	         * @param {arguments} The arguments that make up the command.
	         */
	
	    }, {
	        key: 'sendCommand',
	        value: function sendCommand() {
	            var args = Array.apply(null, arguments);
	            this.sendMessage(args.join(' '));
	            return this;
	        }
	    }, {
	        key: 'receiveData',
	        value: function receiveData(data) {
	            this.buffer += data;
	            var index;
	            while (this.buffer.length > 0 && (index = this.buffer.indexOf('\n')) !== -1) {
	                var message = this.buffer.substring(0, index);
	                this.buffer = this.buffer.substring(index + 1);
	                this.receiveMessage(message);
	            }
	        }
	    }, {
	        key: 'receiveMessage',
	        value: function receiveMessage(message) {
	            console.log('>>> ' + message);
	
	            var res = (0, _helpers.split)(message);
	            var token = res[0];
	            message = res[1];
	            var prefix, command;
	            if (token[0] === ':') {
	                prefix = token;
	                res = (0, _helpers.split)(message);
	                command = res[0];
	                message = res[1];
	            } else {
	                prefix = null;
	                command = token;
	            }
	
	            this.recvEvent.notify(message, prefix, command);
	        }
	    }]);
	
	    return IrcClient;
	}();

/***/ },
/* 3 */
/***/ function(module, exports) {

	module.exports = require("net");

/***/ },
/* 4 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Split a string with the given separator at most n times.
	 * @param {str} The string to split.
	 * @param {sep} The separator to split on.
	 * @param {n} The maximum number of splits to make.
	 * @return An array of substrings.
	 */
	function split(str, sep, n) {
	    if (sep === undefined) {
	        sep = ' ';
	    }
	    if (n === undefined) {
	        n = 1;
	    }
	    var items = [];
	    while (n-- > 0 && str.length > 0) {
	        var index = str.indexOf(sep);
	        var item = str.substring(0, index);
	        str = str.substring(index + sep.length);
	        items.push(item);
	    }
	    if (str.length > 0) items.push(str);
	    return items;
	}
	
	/**
	 * Create a new event. The event has a subscribe method and a notify method.
	 *
	 * The subscribe method returns a callable which will unsubscribe when called,
	 * and can also have its subscribe method called to make further subscriptions.
	 * The subscribe methods take two function handles, the first is the callback
	 * which is called when the event is notified, the second is a predicate which
	 * must return true if the callback is to be invoked. The second argument is
	 * optional, if missing the callback is always called.
	 *
	 * The notify method takes any number of arguments and notifies all subscribers
	 * by calling the predicate and callback functions with the supplied arguments.
	 *
	 * @return A new event.
	 */
	function event() {
	    var subscribers = {};
	    var nextId = 0;
	    return {
	        subscribe: function subscribe(handler, predicate) {
	            var ids = [];
	            var unsubscriber = function unsubscriber() {
	                for (var ind in ids) {
	                    delete subscribers[ids[ind]];
	                }
	            };
	            unsubscriber.subscribe = function (handler, predicate) {
	                var id = nextId++;
	                ids.push(id);
	                subscribers[id] = {
	                    handler: handler,
	                    predicate: predicate || function () {
	                        return true;
	                    }
	                };
	                return this;
	            };
	            unsubscriber.subscribe(handler, predicate);
	            return unsubscriber;
	        },
	        notify: function notify() {
	            for (var id in subscribers) {
	                var subscriber = subscribers[id];
	                if (subscriber.predicate.apply(null, arguments)) {
	                    subscriber.handler.apply(null, arguments);
	                }
	            }
	        }
	    };
	}
	
	/**
	 * Parse the given user mask to create a user object.
	 * @param {mask} The user mask.
	 * @return A user object containing the mask, nick, user, domain and a HTML
	 *     span.
	 */
	function makeUser(mask) {
	    var res = split(mask, '!');
	    var nick = res[0].substring(1);
	    res = split(res[1], '@');
	    var span = document.createElement('span');
	    span.innerText = nick;
	    span.className = 'tooltip';
	    var tooltip = document.createElement('span');
	    tooltip.innerText = mask;
	    tooltip.className = 'tooltiptext';
	    span.appendChild(tooltip);
	    return {
	        mask: mask,
	        nick: nick,
	        user: res[0].substring(1),
	        domain: res[1],
	        span: span
	    };
	}

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;base64,